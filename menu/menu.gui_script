local data = require ("main.data")

local function disablenode (self, node)
	gui.set_enabled(node, false)
end

local function is_monetized()
	return webmonetization and webmonetization.is_monetized()
end


local MIN_POS = 1
local MAX_POS = 6

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("main:/sound", "stop_sound", {})
	--msg.post("@render:", "clear_color", { color = vmath.vector4(13/255, 24/255, 0/255, 1) } )
	sound.play("main:/sound#music2")
	self.node = gui.get_node("container")
	self.wait = 2
	data.state = data.STATE_MENU

	gui.play_flipbook(gui.get_node("hand"), "hero_idle_"..tostring(data.SKIN))
	--[[if data.maxlevel == 1 then
		gui.set_color(gui.get_node("1"), vmath.vector4(249/255,234/255,151/255,0.3))
		gui.set_text(gui.get_node("1"), "LEVELS")
	else
		gui.set_color(gui.get_node("1"), vmath.vector4(249/255,234/255,151/255,1))
		gui.set_text(gui.get_node("1"), string.format("LEVEL: (%d/4)", data.maxlevel))
	end]]

	self.handpos = MIN_POS
	--if data.maxlevel == 1 then self.handpos = 2 end
	self.handpos_y = {
		gui.get_position(gui.get_node("1")),
		gui.get_position(gui.get_node("2")),
		gui.get_position(gui.get_node("3")),
		gui.get_position(gui.get_node("4")),
		gui.get_position(gui.get_node("5")),
		gui.get_position(gui.get_node("6"))
	}

	for i,unlocked in ipairs(data.unlocked_level) do
		gui.set_color(gui.get_node(tostring(i)), unlocked and vmath.vector4(1) or vmath.vector4(0.5))
	end
	self.locked = false

	local wm_text = gui.get_node("wm_text")
	gui.set_text(wm_text, "Web Monetization: Disabled")
	gui.set_color(wm_text, vmath.vector4(0.9, 0.3, 0.2, 1))
	
	if webmonetization then
		webmonetization.set_listener(function(self, event, data)
			if event == webmonetization.EVENT_START or event == webmonetization.EVENT_PROGRESS then
				gui.set_text(wm_text, "Web Monetization: Enabled")
				gui.set_color(wm_text, vmath.vector4(0.2, 0.9, 0.3, 1))
				data.WM = true
				msg.post("#", "webm", {enable = true})
			elseif event == webmonetization.EVENT_STOP then
				gui.set_text(wm_text, "Web Monetization: Disabled")
				gui.set_color(wm_text, vmath.vector4(0.9, 0.3, 0.2, 1))
				data.WM = false
				msg.post("#", "webm", {enable = false})
			end
		end)
	end
end

function update(self, dt)
	local pos = vmath.vector3(self.handpos_y[self.handpos].x, self.handpos_y[self.handpos].y - 180, 0)
	gui.set_position(gui.get_node("hand"), pos)
	if data.state == data.STATE_MENU then
		if self.wait > 0 then self.wait = self.wait - 1 end
	end
end

local function show(self)
	gui.set_enabled(self.node, true)
	gui.animate(self.node, gui.PROP_POSITION, vmath.vector3(0, 0, 0), gui.EASING_INOUTQUAD, 0.5)
	gui.animate(self.node, gui.PROP_COLOR, vmath.vector4(1,1,1,1), gui.EASING_INOUTQUAD, 0.5)
	data.state = data.STATE_MENU
	self.wait = 2
end

local function hide(self)
	gui.animate(self.node, gui.PROP_POSITION, vmath.vector3(0, -100, 0), gui.EASING_INOUTQUAD, 0.5, 0, disablenode)
	gui.animate(self.node, gui.PROP_COLOR, vmath.vector4(1,1,1,0), gui.EASING_INOUTQUAD, 0.5)
	self.wait = 2
end

local function start_game(self)
	data.lives = data.MAX_LIVES
	data.state = data.STATE_GETREADY
	msg.post("main:/sound", "stop_sound", {})
	if data.level > 3 then
		sound.play("main:/sound#music_constr", {gain = 0.5})
	else
		sound.play("main:/sound#music", {gain = 0.5})
	end
	msg.post("main:/handler", "show_game")
end

local function level(self, no)
	if data.unlocked_level[no] then
		data.level = no
		start_game(self)
	end
end

local function content(self)
	hide(self)
	data.state = data.STATE_CONTENT
	msg.post("#content", "show", {})
end

local function exitgame(self)
	msg.post("@system:", "exit", {code = 0})
end

function on_input(self, action_id, action)
	if not self.locked and data.state == data.STATE_MENU and self.wait == 0 then
		if action.pressed then
			for i = 1, MAX_POS do
				if action_id == hash(tostring(i)) then
					level(self, i)
					return
				end
			end
		end
		if action_id == hash("gem_detect") and action.pressed then
			content(self)
		elseif action_id == data.left and action.pressed then
			self.handpos = self.handpos - 1
			if self.handpos < MIN_POS then self.handpos = MAX_POS end
			sound.play("main:/sound#shot")
		elseif action_id == data.right and action.pressed then
			self.handpos = self.handpos + 1
			if self.handpos > MAX_POS then self.handpos = MIN_POS end
			sound.play("main:/sound#shot")
		elseif action_id == data.action and action.pressed then
			if self.handpos ~= MAX_POS and data.unlocked_level[self.handpos] then
				gui.play_flipbook(gui.get_node("door_"..self.handpos), "door_opened")
			end
			self.locked = data.unlocked_level[self.handpos]
			timer.delay(0.5, false, function()

				if self.handpos == MAX_POS then
					content(self)
					self.locked = false
				else
					for i = MIN_POS, MAX_POS-1 do
						if self.handpos == i then
							level(self, i)
							return
						end
					end
					timer.delay(0.25, false, function()
						gui.play_flipbook(gui.get_node("door_"..self.handpos), "door_closed")
						self.locked = false
					end)
				end
			end)
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == data.show then show(self)
	elseif message_id == hash("webm") then
		data.WM = message.enable
		data.GEM_DETECT = message.enable
		for i,unlocked in ipairs(data.unlocked_level) do
			data.unlocked_level[i] = data.WM
			gui.set_color(gui.get_node(tostring(i)), data.unlocked_level[i] and vmath.vector4(1) or vmath.vector4(0.5))
		end
	end
end